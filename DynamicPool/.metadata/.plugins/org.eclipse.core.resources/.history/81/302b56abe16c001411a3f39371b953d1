package vn.edu.hust.student.dynamicpool.presentation.screen;

import vn.edu.hust.student.dynamicpool.presentation.WorldRenderer;
import vn.edu.hust.student.dynamicpool.presentation.assets.AssetMainMenu;
import vn.edu.hust.student.dynamicpool.presentation.assets.Assets;
import vn.edu.hust.student.dynamicpool.utils.AppConst;

import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.ImageButton;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;

public class MainMenuScreen implements Screen {
	private WorldRenderer worldRenderer = null;
	private SpriteBatch bath = null;
	private AssetMainMenu mainMenuAssets = null;
	private Stage stage = new Stage();
	private Table table = new Table();
	private ImageButton createHostButton = null;
	private ImageButton joinHostButton = null;
	
	public MainMenuScreen(WorldRenderer worldRenderer) {
		this.worldRenderer = worldRenderer;
		this.bath = worldRenderer.getBatch();
	}

	@Override
	public void render(float delta) {
		worldRenderer.beginRender();
		renderBackgroundTexture();
		worldRenderer.endRender();
	}

	private void renderBackgroundTexture() {
		Texture mainMenuBackgroundTexture = mainMenuAssets.getMainMenuBackgroundTexture();
		bath.draw(mainMenuBackgroundTexture, 0, 0, AppConst.width, AppConst.height);
	}
	
	@Override
	public void resize(int width, int height) {
		worldRenderer.resize(width, height);
	}

	@Override
	public void show() {
		mainMenuAssets = Assets.instance.mainMenu;
		initButtons();
	}

	private void initButtons() {
		TextureRegionDrawable creatHostImageUp = mainMenuAssets.getCreateHostDrawable();
		createHostButton = new ImageButton(creatHostImageUp);
		
		TextureRegionDrawable joinHostImageUp = mainMenuAssets.getJoinHostDrawable();
		joinHostButton = new ImageButton(joinHostImageUp);
	}

	@Override
	public void hide() {

	}

	@Override
	public void pause() {

	}

	@Override
	public void resume() {

	}

	@Override
	public void dispose() {
		stage.dispose();
	}

}
